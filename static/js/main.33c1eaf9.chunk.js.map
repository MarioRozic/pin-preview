{"version":3,"sources":["UI/Spinner/Spinner.js","templates/template1/ImageTemplate1.js","templates/template2/ImageTemplate2.js","templates/template3/ImageTemplate3.js","templates/template1/ImageTemplate1Black.js","templates/template1/ImageTemplate1Reverse.js","templates/template2/ImageTemplate2Black.js","templates/template2/ImageTemplate2Reverse.js","templates/template3/ImageTemplate3Black.js","templates/template3/ImageTemplate3Reverse.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","className","Component","ImageTemplate1","componentRef","React","createRef","this","props","metaInfo","image","title","site_name","fontSize","console","log","length","src","crossOrigin","format","data","loading","error","message","ref","name","alt","style","background","ImageTemplate2","overflow","marginTop","colorCount","paletteData","paletteLoading","paletteError","ImageTemplate1Black","ImageTemplate1Reverse","ImageTemplate2Black","ImageTemplate3Reverse","GOOGLE_PROXY_SERVER","App","state","displayTemplate","urlString","handleInput","e","setState","target","value","generateHandler","a","Axios","method","url","html","el","document","createElement","innerHTML","metaTagsList","getElementsByTagName","i","getAttribute","description","encodeURIComponent","req","padding","type","onChange","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.33c1eaf9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Spinner.css\";\n\nexport default class Spinner extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"lds-roller\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Color from \"color-thief-react\";\n\nimport \"./ImageTemplate1.css\";\n\nimport { exportComponentAsJPEG } from \"react-component-export-image\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\n\nexport default class ImageTemplate1 extends Component {\n  componentRef = React.createRef();\n\n  render() {\n    let { image, title, site_name } = this.props.metaInfo;\n\n    let fontSize = 40;\n\n    console.log(title.length);\n    if (title.length <= 40) {\n      fontSize = 55;\n    } else if (title.length <= 50) {\n      fontSize = 50;\n    } else if (title.length <= 60) {\n      fontSize = 45;\n    } else if (title.length <= 70) {\n      fontSize = 40;\n    }\n\n    return (\n      <div className=\"template\">\n        <Color\n          src={image}\n          //   src=\"https://images.unsplash.com/photo-1598609456165-a57afb2fb2ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2250&q=80\"\n          crossOrigin=\"Anonymous\"\n          format=\"rgbArray\"\n        >\n          {({ data, loading, error }) => {\n            console.log(data);\n            if (loading)\n              return (\n                <div className=\"templateLoading\">\n                  <Spinner />\n                </div>\n              );\n            if (error) return <p>{error.message}</p>;\n            return (\n              <div\n                className=\"templateBox\"\n                ref={this.componentRef}\n                name={site_name}\n              >\n                <img src={image} alt=\"\" />\n                <div\n                  className=\"templateCover\"\n                  style={{\n                    background: `linear-gradient(to bottom, rgba(${data[0]},${data[1]},${data[2]}, 0) 0%,rgba(${data[0]},${data[1]},${data[2]}, 1) 30%)`,\n                  }}\n                >\n                  <div className=\"templateCoverTextTop\">\n                    <p style={{ fontSize: fontSize }}>{title}</p>\n                  </div>\n                  <div className=\"templateCoverText\">\n                    <p>{site_name}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          }}\n        </Color>\n        <div>\n          {/* <button\n            onClick={() => exportComponentAsJPEG(this.componentRef, \"slika\")}\n          >\n            Export As JPEG\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Color from \"color-thief-react\";\n\nimport \"./ImageTemplate2.css\";\n\nimport { exportComponentAsJPEG } from \"react-component-export-image\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\n\nexport default class ImageTemplate2 extends Component {\n  componentRef = React.createRef();\n\n  render() {\n    let { image, title, site_name } = this.props.metaInfo;\n    return (\n      <div className=\"template\">\n        <Color\n          src={image}\n          //   src=\"https://images.unsplash.com/photo-1598609456165-a57afb2fb2ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2250&q=80\"\n          crossOrigin=\"anonymous\"\n          format=\"rgbArray\"\n        >\n          {({ data, loading, error }) => {\n            console.log(data);\n            if (loading)\n              return (\n                <div className=\"templateLoading\">\n                  <Spinner />\n                </div>\n              );\n            if (error) return <p>{error.message}</p>;\n            return (\n              <div\n                className=\"templateBox\"\n                ref={this.componentRef}\n                name={site_name}\n                style={{ overflow: \"hidden\" }}\n              >\n                <img src={image} alt=\"\" style={{ marginTop: \"140px\" }} />\n                <div\n                  className=\"templateCover2\"\n                  style={{\n                    background: `linear-gradient(to top, rgba(${data[0]},${data[1]},${data[2]}, 0) 0%,rgba(${data[0]},${data[1]},${data[2]}, 1) 45%)`,\n                  }}\n                >\n                  <div className=\"templateCoverText2\">\n                    <p>{site_name}</p>\n                    <p>{title}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          }}\n        </Color>\n        <div>\n          {/* <button\n            onClick={() => exportComponentAsJPEG(this.componentRef, \"slika\")}\n          >\n            Export As JPEG\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Color from \"color-thief-react\";\nimport { Palette } from \"color-thief-react\";\n\nimport \"./ImageTemplate3.css\";\n\nimport { exportComponentAsJPEG } from \"react-component-export-image\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\n\nexport default class ImageTemplate2 extends Component {\n  componentRef = React.createRef();\n\n  render() {\n    let { image, title, site_name } = this.props.metaInfo;\n    return (\n      <div className=\"template\">\n        <Color\n          src={image}\n          //   src=\"https://images.unsplash.com/photo-1598609456165-a57afb2fb2ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2250&q=80\"\n          crossOrigin=\"anonymous\"\n          format=\"hex\"\n        >\n          {({ data, loading, error }) => {\n            console.log(data);\n            if (loading)\n              return (\n                <div className=\"templateLoading\">\n                  <Spinner />\n                </div>\n              );\n            if (error) return <p>{error.message}</p>;\n            return (\n              <Palette\n                src={image}\n                colorCount={2}\n                crossOrigin=\"anonymous\"\n                format=\"hex\"\n              >\n                {({\n                  data: paletteData,\n                  loading: paletteLoading,\n                  error: paletteError,\n                }) => {\n                  console.log(\"palette\", paletteData);\n                  if (paletteLoading)\n                    return (\n                      <div className=\"templateLoading\">\n                        <Spinner />\n                      </div>\n                    );\n                  if (paletteError) return <p>{paletteError.message}</p>;\n                  return (\n                    <div\n                      className=\"templateBox\"\n                      ref={this.componentRef}\n                      name={site_name}\n                    >\n                      <img src={image} alt=\"\" />\n                      <div className=\"templateCover3\">\n                        <div\n                          style={{ background: data }}\n                          className=\"templateCover3Box\"\n                        >\n                          <p>{title}</p>\n                        </div>\n                        <div\n                          style={{ background: paletteData[1] }}\n                          className=\"templateCover3BoxSmall\"\n                        >\n                          <p>{site_name}</p>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                }}\n              </Palette>\n            );\n          }}\n        </Color>\n        <div>\n          {/* <button\n            onClick={() => exportComponentAsJPEG(this.componentRef, \"slika\")}\n          >\n            Export As JPEG\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Color from \"color-thief-react\";\n\nimport \"./ImageTemplate1.css\";\n\nimport { exportComponentAsJPEG } from \"react-component-export-image\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\n\nexport default class ImageTemplate1Black extends Component {\n  componentRef = React.createRef();\n\n  render() {\n    let { image, title, site_name } = this.props.metaInfo;\n\n    let fontSize = 40;\n\n    console.log(title.length);\n    if (title.length <= 40) {\n      fontSize = 55;\n    } else if (title.length <= 50) {\n      fontSize = 50;\n    } else if (title.length <= 60) {\n      fontSize = 45;\n    } else if (title.length <= 70) {\n      fontSize = 40;\n    }\n\n    return (\n      <div className=\"template\">\n        <Color\n          src={image}\n          //   src=\"https://images.unsplash.com/photo-1598609456165-a57afb2fb2ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2250&q=80\"\n          crossOrigin=\"Anonymous\"\n          format=\"rgbArray\"\n        >\n          {({ data, loading, error }) => {\n            console.log(data);\n            if (loading)\n              return (\n                <div className=\"templateLoading\">\n                  <Spinner />\n                </div>\n              );\n            if (error) return <p>{error.message}</p>;\n            return (\n              <div\n                className=\"templateBox\"\n                ref={this.componentRef}\n                name={site_name}\n              >\n                <img src={image} alt=\"\" />\n                <div\n                  className=\"templateCover\"\n                  style={{\n                    background: `linear-gradient(to bottom, rgba(0,0,0, 0) 0%,rgba(0,0,0, 1) 30%)`,\n                  }}\n                >\n                  <div className=\"templateCoverTextTop\">\n                    <p style={{ fontSize: fontSize }}>{title}</p>\n                  </div>\n                  <div className=\"templateCoverText\">\n                    <p>{site_name}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          }}\n        </Color>\n        <div>\n          {/* <button\n            onClick={() => exportComponentAsJPEG(this.componentRef, \"slika\")}\n          >\n            Export As JPEG\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Color from \"color-thief-react\";\n\nimport \"./ImageTemplate1.css\";\n\nimport { exportComponentAsJPEG } from \"react-component-export-image\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\n\nexport default class ImageTemplate1Reverse extends Component {\n  componentRef = React.createRef();\n\n  render() {\n    let { image, title, site_name } = this.props.metaInfo;\n\n    let fontSize = 40;\n\n    console.log(title.length);\n    if (title.length <= 40) {\n      fontSize = 55;\n    } else if (title.length <= 50) {\n      fontSize = 50;\n    } else if (title.length <= 60) {\n      fontSize = 45;\n    } else if (title.length <= 70) {\n      fontSize = 40;\n    }\n\n    return (\n      <div className=\"template\">\n        <Color\n          src={image}\n          //   src=\"https://images.unsplash.com/photo-1598609456165-a57afb2fb2ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2250&q=80\"\n          crossOrigin=\"Anonymous\"\n          format=\"rgbArray\"\n        >\n          {({ data, loading, error }) => {\n            console.log(data);\n            if (loading)\n              return (\n                <div className=\"templateLoading\">\n                  <Spinner />\n                </div>\n              );\n            if (error) return <p>{error.message}</p>;\n            return (\n              <div\n                className=\"templateBox\"\n                ref={this.componentRef}\n                name={site_name}\n              >\n                <img src={image} alt=\"\" />\n                <div\n                  className=\"templateCover\"\n                  style={{\n                    background: `linear-gradient(to bottom, rgba(${data[0]},${data[1]},${data[2]}, 0) 0%,rgba(${data[0]},${data[1]},${data[2]}, 1) 30%)`,\n                  }}\n                >\n                  <div className=\"templateCoverTextTop\">\n                    <p\n                      style={{\n                        fontSize: fontSize,\n                        \"mix-blend-mode\": \"difference\",\n                      }}\n                    >\n                      {title}\n                    </p>\n                  </div>\n                  <div className=\"templateCoverText\">\n                    <p\n                      style={{\n                        \"mix-blend-mode\": \"difference\",\n                      }}\n                    >\n                      {site_name}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            );\n          }}\n        </Color>\n        <div>\n          {/* <button\n            onClick={() => exportComponentAsJPEG(this.componentRef, \"slika\")}\n          >\n            Export As JPEG\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Color from \"color-thief-react\";\n\nimport \"./ImageTemplate2.css\";\n\nimport { exportComponentAsJPEG } from \"react-component-export-image\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\n\nexport default class ImageTemplate2Black extends Component {\n  componentRef = React.createRef();\n\n  render() {\n    let { image, title, site_name } = this.props.metaInfo;\n    return (\n      <div className=\"template\">\n        <Color\n          src={image}\n          //   src=\"https://images.unsplash.com/photo-1598609456165-a57afb2fb2ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2250&q=80\"\n          crossOrigin=\"anonymous\"\n          format=\"rgbArray\"\n        >\n          {({ data, loading, error }) => {\n            console.log(data);\n            if (loading)\n              return (\n                <div className=\"templateLoading\">\n                  <Spinner />\n                </div>\n              );\n            if (error) return <p>{error.message}</p>;\n            return (\n              <div\n                className=\"templateBox\"\n                ref={this.componentRef}\n                name={site_name}\n                style={{ overflow: \"hidden\" }}\n              >\n                <img src={image} alt=\"\" style={{ marginTop: \"140px\" }} />\n                <div\n                  className=\"templateCover2\"\n                  style={{\n                    background: `linear-gradient(to top, rgba(0,0,0, 0) 0%,rgba(0,0,0, 1) 45%)`,\n                  }}\n                >\n                  <div className=\"templateCoverText2\">\n                    <p>{site_name}</p>\n                    <p>{title}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          }}\n        </Color>\n        <div>\n          {/* <button\n            onClick={() => exportComponentAsJPEG(this.componentRef, \"slika\")}\n          >\n            Export As JPEG\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Color from \"color-thief-react\";\n\nimport \"./ImageTemplate2.css\";\n\nimport { exportComponentAsJPEG } from \"react-component-export-image\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\n\nexport default class ImageTemplate2Black extends Component {\n  componentRef = React.createRef();\n\n  render() {\n    let { image, title, site_name } = this.props.metaInfo;\n    return (\n      <div className=\"template\">\n        <Color\n          src={image}\n          //   src=\"https://images.unsplash.com/photo-1598609456165-a57afb2fb2ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2250&q=80\"\n          crossOrigin=\"anonymous\"\n          format=\"rgbArray\"\n        >\n          {({ data, loading, error }) => {\n            console.log(data);\n            if (loading)\n              return (\n                <div className=\"templateLoading\">\n                  <Spinner />\n                </div>\n              );\n            if (error) return <p>{error.message}</p>;\n            return (\n              <div\n                className=\"templateBox\"\n                ref={this.componentRef}\n                name={site_name}\n                style={{ overflow: \"hidden\" }}\n              >\n                <img src={image} alt=\"\" style={{ marginTop: \"140px\" }} />\n                <div\n                  className=\"templateCover2\"\n                  style={{\n                    background: `linear-gradient(to top, rgba(${data[0]},${data[1]},${data[2]}, 0) 0%,rgba(${data[0]},${data[1]},${data[2]}, 1) 45%)`,\n                  }}\n                >\n                  <div className=\"templateCoverText2\">\n                    <p\n                      style={{\n                        \"mix-blend-mode\": \"difference\",\n                      }}\n                    >\n                      {site_name}\n                    </p>\n                    <p\n                      style={{\n                        \"mix-blend-mode\": \"difference\",\n                      }}\n                    >\n                      {title}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            );\n          }}\n        </Color>\n        <div>\n          {/* <button\n            onClick={() => exportComponentAsJPEG(this.componentRef, \"slika\")}\n          >\n            Export As JPEG\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Color from \"color-thief-react\";\nimport { Palette } from \"color-thief-react\";\n\nimport \"./ImageTemplate3.css\";\n\nimport { exportComponentAsJPEG } from \"react-component-export-image\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\n\nexport default class ImageTemplate2Black extends Component {\n  componentRef = React.createRef();\n\n  render() {\n    let { image, title, site_name } = this.props.metaInfo;\n    return (\n      <div className=\"template\">\n        <Color\n          src={image}\n          //   src=\"https://images.unsplash.com/photo-1598609456165-a57afb2fb2ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2250&q=80\"\n          crossOrigin=\"anonymous\"\n          format=\"hex\"\n        >\n          {({ data, loading, error }) => {\n            console.log(data);\n            if (loading)\n              return (\n                <div className=\"templateLoading\">\n                  <Spinner />\n                </div>\n              );\n            if (error) return <p>{error.message}</p>;\n            return (\n              <Palette\n                src={image}\n                colorCount={2}\n                crossOrigin=\"anonymous\"\n                format=\"hex\"\n              >\n                {({\n                  data: paletteData,\n                  loading: paletteLoading,\n                  error: paletteError,\n                }) => {\n                  console.log(\"palette\", paletteData);\n                  if (paletteLoading)\n                    return (\n                      <div className=\"templateLoading\">\n                        <Spinner />\n                      </div>\n                    );\n                  if (paletteError) return <p>{paletteError.message}</p>;\n                  return (\n                    <div\n                      className=\"templateBox\"\n                      ref={this.componentRef}\n                      name={site_name}\n                    >\n                      <img src={image} alt=\"\" />\n                      <div className=\"templateCover3\">\n                        <div\n                          style={{ background: \"#000\" }}\n                          className=\"templateCover3Box\"\n                        >\n                          <p>{title}</p>\n                        </div>\n                        <div\n                          style={{ background: paletteData[1] }}\n                          className=\"templateCover3BoxSmall\"\n                        >\n                          <p>{site_name}</p>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                }}\n              </Palette>\n            );\n          }}\n        </Color>\n        <div>\n          {/* <button\n            onClick={() => exportComponentAsJPEG(this.componentRef, \"slika\")}\n          >\n            Export As JPEG\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Color from \"color-thief-react\";\nimport { Palette } from \"color-thief-react\";\n\nimport \"./ImageTemplate3.css\";\n\nimport { exportComponentAsJPEG } from \"react-component-export-image\";\nimport Spinner from \"../../UI/Spinner/Spinner\";\n\nexport default class ImageTemplate3Reverse extends Component {\n  componentRef = React.createRef();\n\n  render() {\n    let { image, title, site_name } = this.props.metaInfo;\n    return (\n      <div className=\"template\">\n        <Color\n          src={image}\n          //   src=\"https://images.unsplash.com/photo-1598609456165-a57afb2fb2ea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2250&q=80\"\n          crossOrigin=\"anonymous\"\n          format=\"hex\"\n        >\n          {({ data, loading, error }) => {\n            console.log(data);\n            if (loading)\n              return (\n                <div className=\"templateLoading\">\n                  <Spinner />\n                </div>\n              );\n            if (error) return <p>{error.message}</p>;\n            return (\n              <Palette\n                src={image}\n                colorCount={2}\n                crossOrigin=\"anonymous\"\n                format=\"hex\"\n              >\n                {({\n                  data: paletteData,\n                  loading: paletteLoading,\n                  error: paletteError,\n                }) => {\n                  console.log(\"palette\", paletteData);\n                  if (paletteLoading)\n                    return (\n                      <div className=\"templateLoading\">\n                        <Spinner />\n                      </div>\n                    );\n                  if (paletteError) return <p>{paletteError.message}</p>;\n                  return (\n                    <div\n                      className=\"templateBox\"\n                      ref={this.componentRef}\n                      name={site_name}\n                    >\n                      <img src={image} alt=\"\" />\n                      <div className=\"templateCover3\">\n                        <div\n                          style={{ background: data }}\n                          className=\"templateCover3Box\"\n                        >\n                          <p\n                            style={{\n                              \"mix-blend-mode\": \"difference\",\n                            }}\n                          >\n                            {title}\n                          </p>\n                        </div>\n                        <div\n                          style={{ background: paletteData[1] }}\n                          className=\"templateCover3BoxSmall\"\n                        >\n                          <p>{site_name}</p>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                }}\n              </Palette>\n            );\n          }}\n        </Color>\n        <div>\n          {/* <button\n            onClick={() => exportComponentAsJPEG(this.componentRef, \"slika\")}\n          >\n            Export As JPEG\n          </button> */}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Axios from \"axios\";\nimport ImageTemplate1 from \"./templates/template1/ImageTemplate1\";\nimport ImageTemplate2 from \"./templates/template2/ImageTemplate2\";\nimport ImageTemplate3 from \"./templates/template3/ImageTemplate3\";\n\nimport Spinner from \"./UI/Spinner/Spinner\";\nimport ImageTemplate1Black from \"./templates/template1/ImageTemplate1Black\";\nimport ImageTemplate1Reverse from \"./templates/template1/ImageTemplate1Reverse\";\nimport ImageTemplate2Black from \"./templates/template2/ImageTemplate2Black\";\nimport ImageTemplate2Reverse from \"./templates/template2/ImageTemplate2Reverse\";\nimport ImageTemplate3Black from \"./templates/template3/ImageTemplate3Black\";\nimport ImageTemplate3Reverse from \"./templates/template3/ImageTemplate3Reverse\";\n\nconst GOOGLE_PROXY_SERVER =\n  \"https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?container=focus&refresh=2592000&url=\";\n\nclass App extends Component {\n  state = {\n    loading: false,\n    displayTemplate: false,\n    urlString: \"\",\n    metaInfo: {},\n  };\n\n  async componentDidMount(req) {}\n\n  handleInput = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  generateHandler = async () => {\n    let { urlString } = this.state;\n    this.setState({ loading: true, displayTemplate: false });\n    const html = await Axios({\n      method: \"GET\",\n      url: `https://cors-anywhere.herokuapp.com/${urlString}`,\n    });\n\n    var el = document.createElement(\"html\");\n    el.innerHTML = html.data;\n\n    let metaTagsList = el.getElementsByTagName(\"meta\");\n    let metaInfo = {};\n\n    for (let i = 0; i < metaTagsList.length; i++) {\n      // console.log(metaTagsList[i]);\n      if (metaTagsList[i].getAttribute(\"property\") === \"og:description\") {\n        metaInfo.description = metaTagsList[i].getAttribute(\"content\");\n      }\n\n      if (metaTagsList[i].getAttribute(\"property\") === \"og:image\") {\n        metaInfo.image =\n          GOOGLE_PROXY_SERVER +\n          encodeURIComponent(metaTagsList[i].getAttribute(\"content\"));\n      }\n\n      if (metaTagsList[i].getAttribute(\"property\") === \"og:title\") {\n        metaInfo.title = metaTagsList[i].getAttribute(\"content\");\n      }\n\n      if (metaTagsList[i].getAttribute(\"property\") === \"og:url\") {\n        metaInfo.url = metaTagsList[i].getAttribute(\"content\");\n      }\n\n      if (metaTagsList[i].getAttribute(\"property\") === \"og:site_name\") {\n        metaInfo.site_name = metaTagsList[i].getAttribute(\"content\");\n      }\n    }\n\n    // set meta obj\n    this.setState({\n      loading: false,\n      displayTemplate: true,\n      metaInfo,\n      urlString: \"\",\n    });\n  };\n\n  render() {\n    let { loading, metaInfo, displayTemplate } = this.state;\n    return (\n      <div className=\"App\">\n        <div style={{ padding: \"50px\" }}>\n          <input\n            type=\"text\"\n            onChange={this.handleInput}\n            value={this.state.urlString}\n            name=\"urlString\"\n          />\n          <button onClick={this.generateHandler}>Generate</button>\n        </div>\n\n        {loading ? (\n          <Spinner />\n        ) : displayTemplate ? (\n          <>\n            <div className=\"appTemplateList\">\n              <ImageTemplate1 metaInfo={metaInfo} />\n              <ImageTemplate1Black metaInfo={metaInfo} />\n              <ImageTemplate1Reverse metaInfo={metaInfo} />\n            </div>\n            <div className=\"appTemplateList\">\n              <ImageTemplate2 metaInfo={metaInfo} />\n              <ImageTemplate2Black metaInfo={metaInfo} />\n              <ImageTemplate2Reverse metaInfo={metaInfo} />\n            </div>\n            <div className=\"appTemplateList\">\n              <ImageTemplate3 metaInfo={metaInfo} />\n              <ImageTemplate3Black metaInfo={metaInfo} />\n              <ImageTemplate3Reverse metaInfo={metaInfo} />\n            </div>\n          </>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}